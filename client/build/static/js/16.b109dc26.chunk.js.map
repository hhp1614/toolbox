{"version":3,"sources":["views/codec/qrCode/helper.ts","utils/log.ts","views/codec/qrCode/index.tsx","components/CopyButton.tsx"],"names":["getImageUrl","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","e","target","result","onerror","LogColor","getStyle","color","Log","args","console","log","primary","warning","success","error","QrCode","useState","sourceUrl","setSourceUrl","outputUrl","setOutputUrl","sourceImage","setSourceImage","sourceImageFocus","setSourceImageFocus","fileRef","useRef","imageRef","generate","a","url","QRCodeParser","data","id","className","value","onChange","placeholder","tabIndex","onFocus","onBlur","onPaste","text","clipboardData","getData","then","catch","items","length","i","type","indexOf","getAsFile","getImageFromClipboard","ref","src","onError","alt","crossOrigin","readOnly","htmlFor","accept","current","files","hidden","onClick","CopyButton","copied","setCopied","onCopy","setTimeout","style"],"mappings":"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","file":"static/js/16.b109dc26.chunk.js","sourcesContent":["/**\n * 获取图片地址\n * @param file 图片文件对象\n */\nexport function getImageUrl(file: File) {\n  return new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = e => resolve(e.target!.result as string);\n    reader.onerror = e => reject(e);\n  });\n}\n\n/**\n * 从剪贴板获取图片\n * @param items\n */\nexport function getImageFromClipboard(items: DataTransferItemList) {\n  if (!items || !items.length) {\n    return;\n  }\n  for (let i = 0; i < items.length; i++) {\n    if (items[i].type.indexOf('image') !== -1) {\n      return items[i].getAsFile()!;\n    }\n  }\n}\n","enum LogColor {\n  primary = '#1890ff',\n  warning = '#faad14',\n  success = '#52c41a',\n  error = '#f5222d'\n}\n\nfunction getStyle(color: string) {\n  return `color: ${color};padding: 0 4px;border-radius: 4px;`;\n}\n\n/**\n * 打印类\n */\nexport class Log {\n  /**\n   * 打印信息\n   * @param args 参数\n   */\n  static info(...args: any[]) {\n    console.log('%c%s', getStyle(LogColor.primary), '[info]', ...args);\n  }\n\n  /**\n   * 打印警告信息\n   * @param args 参数\n   */\n  static warn(...args: any[]) {\n    console.log('%c%s', getStyle(LogColor.warning), '[warn]', ...args);\n  }\n\n  /**\n   * 打印成功信息\n   * @param args 参数\n   */\n  static success(...args: any[]) {\n    console.log('%c%s', getStyle(LogColor.success), '[success]', ...args);\n  }\n\n  /**\n   * 打印错误信息\n   * @param args 参数\n   */\n  static error(...args: any[]) {\n    console.log('%c%s', getStyle(LogColor.error), '[error]', ...args);\n  }\n}\n","import React, { FC, useRef, useState } from 'react';\nimport QRCode from 'qrcode.react';\nimport QRCodeParser from 'qrcode-parser';\nimport { getImageFromClipboard, getImageUrl } from './helper';\nimport { Log } from '../../../utils/log';\nimport CopyButton from '../../../components/CopyButton';\n\nconst QrCode: FC = () => {\n  const [sourceUrl, setSourceUrl] = useState('');\n  const [outputUrl, setOutputUrl] = useState('');\n  const [sourceImage, setSourceImage] = useState('');\n  const [sourceImageFocus, setSourceImageFocus] = useState(false);\n\n  const fileRef = useRef<HTMLInputElement>({} as HTMLInputElement);\n  const imageRef = useRef<HTMLImageElement>({} as HTMLImageElement);\n\n  // 选择图片\n  const selectImage = () => {\n    const file = fileRef.current.files![0];\n    generate(file).catch(e => Log.error(e));\n  };\n\n  const pasteImage = (e: React.ClipboardEvent<HTMLDivElement>) => {\n    // 从剪贴板获取文本\n    const text = e.clipboardData.getData('text/plain');\n    if (text) {\n      setSourceImage(text);\n      QRCodeParser(text).then(result => setOutputUrl(result.data)).catch(e => Log.error(e));\n      return;\n    }\n    // 从剪贴板获取文件\n    const file = getImageFromClipboard(e.clipboardData.items);\n    file && generate(file).catch(e => Log.error(e));\n  };\n\n  // 生成二维码\n  const generate = async (file: File) => {\n    const url = await getImageUrl(file);\n    setSourceImage(url);\n    const result = await QRCodeParser(file);\n    setOutputUrl(result.data);\n  };\n\n  const clearDecode = () => {\n    setSourceImage('');\n    setOutputUrl('');\n  };\n\n  return (\n    <div id=\"qrCode\">\n      <div className=\"title\">二维码编码</div>\n      <div className=\"encode\">\n        <div className=\"source\">\n          <textarea\n            value={sourceUrl}\n            onChange={e => setSourceUrl(e.target.value)}\n            placeholder=\"输入需要转成二维码的字符串\"\n          />\n        </div>\n        <div className=\"output\">\n          <QRCode value={sourceUrl} />\n        </div>\n      </div>\n\n      <div className=\"title\">二维码解码</div>\n      <div className=\"decode\">\n        <div\n          className={`source ${sourceImageFocus ? 'active' : ''}`}\n          tabIndex={-1}\n          onFocus={() => setSourceImageFocus(true)}\n          onBlur={() => setSourceImageFocus(false)}\n          onPaste={pasteImage}\n        >\n          {sourceImage ? (\n            <img\n              ref={imageRef}\n              src={sourceImage}\n              onError={() => setSourceImage('')}\n              alt=\"二维码\"\n              crossOrigin=\"anonymous\"\n            />\n          ) : (\n            '支持直接粘贴图片'\n          )}\n        </div>\n        <div className=\"output\">\n          <textarea value={outputUrl} readOnly />\n        </div>\n      </div>\n      <div className=\"action\">\n        <label htmlFor=\"selectImage\" className=\"btn primary\">选择图片</label>\n        <input ref={fileRef} id=\"selectImage\" type=\"file\" accept=\"image/png\" onChange={selectImage} hidden />\n        <button className=\"error\" onClick={clearDecode}>清空</button>\n        <CopyButton text={outputUrl} />\n      </div>\n    </div>\n  );\n};\n\nexport default QrCode;\n","import React, { FC, useState } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\ntype CopyButtonProps = {\n  // 需要复制的文本\n  text: string;\n};\n\nconst CopyButton: FC<CopyButtonProps> = ({ text }) => {\n  const [copied, setCopied] = useState(false);\n\n  const copyText = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <>\n      <CopyToClipboard text={text} onCopy={copyText}>\n        <button className=\"warn\">复制结果</button>\n      </CopyToClipboard>\n      {copied ? <span style={{ color: '#52c41a' }}>已复制</span> : null}\n    </>\n  );\n};\n\nexport default CopyButton;\n"],"sourceRoot":""}